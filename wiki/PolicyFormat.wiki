#summary Access Control Policy Format

= Introduction =

The access control policy describes the desired network security policy through the use of a high-level language that uses keywords and tokens.  Tokens are derived from the [NamingLibrary naming libraries] import of definition files.


= Basic Policy File Format =

A policy file consists of one or more filters, with each filter containing one or more terms.  Each term specifies basic network filter information, such as addresses, ports, protocols and actions.

A policy file consists of one or more header sections, with each header section being followed by one or more terms.

== Header Section ==
Each filter is identified with a header section.  The header section is used to define the type of filter, a descriptor or name, direction (if applicable) and format (ipv4/ipv6).

For example, the following simple header defines a filter that can generate output for 'juniper', 'cisco' and 'iptables' formats.
{{{
header {
  comment:: "Example header for juniper and iptables filter."
  target:: juniper edge-filter
  target:: iptables INPUT
  target:: cisco edge-filter
}
}}}

Notice that the first target has 2 arguments: "juniper" and "edge_filter".
The first argument specifies that the filter can be rendered for Juniper JCLs, and that the output filter should be called "edge_filter".

The second target also has 2 arguments: "iptables" and "INPUT".
Since Iptables has specific inherent filters, such as INPUT, OUTPUT and FORWARD, the target specification for iptables must point to one of these filters.

Likewise, the 3rd target, "cisco" simply specifies the name of the access control list to be generated.

Each target platform may have different possible arguments, which are detailed in the following subsections.

=== Juniper ===
The juniper header designation has the following format:
{{{
target:: juniper [filter name] {inet|inet6|bridge}
}}}
  * _filter name_: defines the name of the juniper filter.
  * _inet_: specifies the output should be for IPv4 only filters. This is the default format.
  * _inet6_: specifies the output be for IPv6 only filters.
  * _bridge_: specifies the output should render a Juniper bridge filter.

When _inet4_ or _inet6_ is specified, naming tokens with both IPv4 and IPv6 filters will be rendered using only the specified addresses.

The default format is _inet4_, and is implied if not other argument is given.

=== Cisco ===
The cisco header designation has the following format:
{{{
target:: cisco [filter name] {extended|standard|object-group}
}}}
  * _filter name_: defines the name or number of the cisco filter.
  * _extended_: specifies that the output should be an extended access list, and the filter name should be non-numeric.  This is the default option.
  * _standard_: specifies that the output should be a standard access list, and the filter name should be numeric and in the range of 1-99.
  * _object-group_: specifies this is a cisco extended access list, and that object-groups should be used for ports and addresses.

At this time, the Cisco generator does not support IPv6 output.  Any IPv6 addresses contained in the naming tokens will not be rendered in the output.

=== Iptables ===
The Iptables header designation has the following format:
{{{
target:: iptables [INPUT|OUTPUT|FORWARD] {ACCEPT|DROP} {inet|inet6}
}}}
  * _INPUT_: apply the terms to the input filter.
  * _OUTPUT_: apply the terms to the output filter.
  * _FORWARD_: apply the terms to the forwarding filter.
  * _ACCEPT_: specifies that the default policy on the filter should be 'accept'.
  * _DROP_: specifies that the default policy on the filter should be to 'drop'.
  * _inet_: specifies that the resulting filter should only render IPv4 addresses.
  * _inet6_: specifies that the resulting filter should only render IPv6 addresses.

== Terms Section ==

Terms defines access control rules within a filter.  Once the filter is defined in the header sections, it is following by one or more terms.  Terms are enclosed in brackets and use keywords to specify the functionality of a specific access control.

A term section begins with the keyword term, followed by a term name.  Opening and closing brackets follow, which include the keywords and tokens to define the matching and action of the access control term.

The keywords fall into two categories, those are are required to be supported by all output generators, and those that are not required to be supported.

=== Keywords ===
The following are a list of keywords that must be supported by all output generators:
  * _action::_ the action to take when matched. [accept|deny|reject|next|reject-with-tcp-rst]
  * _comment::_ a text comment enclosed in double-quotes.  The comment can extend over multiple lines if desired, until a closing quote is encountered.
  * _destination-address::_ one or more destination address tokens
  * _destination-exclude::_ exclude one or more address tokens from the specified destination-address 
  * _destination-port::_ one or more service definition tokens
  * _option::_ [established|tcp-established|sample|intial|rst|first-fragment]
    * _established_ - only permit established connections, implements tcp-established if protocol is tcp only, otherwise adds 1024-65535 to required destination-ports.
    * _tcp-established_ - only permit established tcp connections, usually checked based on TCP flag settings.  If protocol UDP is included in term, only adds 1024-65535 to required destination-ports.
    * _sample_ - not supported by all generators.  Samples traffic for netflow.
    * _initial_ - currently only supported by juniper generator.  Appends tcp-initial to the term.
    * _rst_ - currently only supported by juniper generator.  Appends "tcp-flags rst" to the term.
    * _first-fragment_ - currently only supported by juniper generator.  Appends 'first-fragment' to the term.
  * _protocol::_ the network protocols this term will match, such as tcp, udp, icmp, or a numeric value.
  * _protocol-except::_ network protocols that should be excluded from the protocol specification.  This is rarely used.
  * _source-address::_ one or more source address tokens
  * _source-exclude::_ exclude one or more address tokens from the specified source-address
  * _source-port::_ one or more service definition tokens
  * _verbatim::_ this specifies that the text enclosed within quotes should be rendered into the output without interpretation or modification.  This is sometimes used as a temporary workaround while new required features are being added.

=== Optionally Supported Keywords ===
The following are keywords that can be optionally supported by output generators.  It is important to note that these may or may not function properly on all generators.

  * _address::_ one or more network address tokens
  * _counter::_ update a counter for matching packets
  * _destination-prefix::_ currently only supported by the juniper generator 
  * _ether-type::_ currently on used by juniper generator to specify arp packets
  * _fragement-offset::_ currently only used by juniper generator to specify a fragment offset of a fragmented packet
  * _icmp-type::_ [echo-reply|echo-request|port-unreachable]
  * _logging::_ specify that this packet should be logged
  * _loss-priority::_ juniper only, specify loss priority
  * _packet-length::_ juniper only, specify packet length
  * _policer::_ juniper only, specify which policer to apply to matching packets
  * _precedence::_ juniper only, specify precendence
  * _qos::_ apply quality of service classification to matching packets
  * _routing-instance::_ juniper only, specify routing instance for matching packets
  * _source-prefix::_ juniper only, specify source-prefix matching
  * _traffic-type::_ juniper only, specify traffic-type

=== Term Examples ===
The following are examples of how to construct a term, and assumes that naming definition tokens used have been defined in the definitions files.

* Block incoming bogons and spoofed traffic *
{{{
term block-bogons {
  source-address:: BOGONS RFC1918
  source-address:: COMPANY_INTERNAL
  action:: deny
}}}

* Permit Public to Web Servers *
{{{
term permit-to-web-servers {
  destination-address:: WEB_SERVERS
  destination-port:: HTTP
  protocol:: tcp
  action:: accept
}
}}}

* Permit Replies to DNS Servers From Primaries *
{{{
term permit-dns-tcp-replies {
  source-address:: DNS_PRIMARIES
  destination-address:: DNS_SECONDARIES
  source-address:: DNS
  protocol:: tcp
  option:: tcp-established
  action:: accept
}
}}}

* Permit All Corporate Networks, Except New York, to FTP Server *

This will "subtract" the CORP_NYC_NETBLOCK from the CORP_NETBLOCKS token.  For example, assume CORP_NETBLOCKS includes 200.0.0.0/20, and CORP_NYC_NETBLOCK is defined as 200.2.0.0/24.  The source-exclude will remove the NYC netblock from the permitted source addresses.  If the excluded address is not contained with the source address, nothing is changed.
{{{
term allow-inbound-ftp-from-corp {
  source-address:: CORP_NETBLOCKS
  source-exclude:: CORP_NYC_NETBLOCK
  destination-port:: FTP
  protocol:: tcp
  action:: accept
}
}}}

== Example Policy File ==

Below is an example policy file for a Juniper target platform.  It contains two filters, each with a handful of terms.  This examples assumes that the network and service naming definition tokens have been defined.

{{{
header {
  comment:: "edge input filter for sample network."
  target:: juniper edge-inbound
}
term discard-spoofs {
  source-address:: RFC1918
  action:: deny
}
term permit-ipsec-access {
  source-address:: REMOTE_OFFICES
  destination-address:: VPN_HUB
  protocol:: 50
  action:: accept
}
term permit-ike-access {
  source-address:: REMOTE_OFFICES
  destination-address:: VPN_HUB
  protocol:: udp
  destination-port:: IKE
  action:: accept
}
term permit-public-web-access {
  destination-address:: WEB_SERVERS
  destination-port:: HTTP HTTPS HTTP_8080
  protocol:: TCP
  action:: accept
}
term permit-tcp-replies {
  option:: tcp-established
  action:: accept
}
term default-deny {
  action:: deny
}

header {
  comment:: "edge output filter for sample network."
  target:: juniper edge-outbound
}
term drop-internal-sourced-outbound {
  destination-address:: INTERNAL
  destination-address:: RESERVED
  action:: deny
}
term reject-internal {
  source-address:: INTERNAL
  action:: reject
}
term default-accept {
  action:: accept
}
}}}